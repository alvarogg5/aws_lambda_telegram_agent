name: Deploy Telegram Agent to AWS Lambda

on:
  push:
    branches:
      - main
      - develop

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: telegram_bot_agent

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # environment: production # Lo quitamos para que no pida aprobaciÃ³n manual en develop

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment-specific variables
        id: vars
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "LAMBDA_FUNCTION_NAME=telegram-agent-lambda" >> $GITHUB_OUTPUT
            echo "LAMBDA_ROLE=${{ secrets.AWS_LAMBDA_EXECUTION_ROLE }}" >> $GITHUB_OUTPUT
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_OUTPUT
            echo "WEBHOOK_ENDPOINT=${{ secrets.TELEGRAM_WEBHOOK_ENDPOINT }}" >> $GITHUB_OUTPUT
            echo "MONGO_URI=${{ secrets.MONGODB_CONNECTION_STRING_PROD || secrets.MONGODB_CONNECTION_STRING }}" >> $GITHUB_OUTPUT
            echo "MONGO_DB_NAME=${{ secrets.MONGODB_DATABASE_NAME_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "LAMBDA_FUNCTION_NAME=telegram-agent-lambda-staging" >> $GITHUB_OUTPUT
            echo "LAMBDA_ROLE=${{ secrets.AWS_LAMBDA_EXECUTION_ROLE_STAGING }}" >> $GITHUB_OUTPUT
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}" >> $GITHUB_OUTPUT
            echo "WEBHOOK_ENDPOINT=${{ secrets.TELEGRAM_WEBHOOK_ENDPOINT_STAGING || secrets.TELEGRAM_WEBHOOK_ENDPOINT }}" >> $GITHUB_OUTPUT
            echo "MONGO_URI=${{ secrets.MONGODB_CONNECTION_STRING_STAGING }}" >> $GITHUB_OUTPUT
            echo "MONGO_DB_NAME=${{ secrets.MONGODB_DATABASE_NAME_STAGING }}" >> $GITHUB_OUTPUT
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy Lambda function with container image
        uses: aws-actions/aws-lambda-deploy@v1.1.0
        with:
          function-name: ${{ steps.vars.outputs.LAMBDA_FUNCTION_NAME }}
          package-type: Image
          image-uri: ${{ steps.build-image.outputs.image }}
          role: ${{ steps.vars.outputs.LAMBDA_ROLE }}
          environment: '{"OPENAI_API_KEY":"${{ secrets.OPENAI_API_KEY }}","ELEVENLABS_API_KEY":"${{ secrets.ELEVENLABS_API_KEY }}","TELEGRAM_BOT_TOKEN":"${{ steps.vars.outputs.TELEGRAM_TOKEN }}","TELEGRAM_WEBHOOK_ENDPOINT":"${{ steps.vars.outputs.WEBHOOK_ENDPOINT }}","MONGODB_CONNECTION_STRING":"${{ steps.vars.outputs.MONGO_URI }}","MONGODB_DATABASE_NAME":"${{ steps.vars.outputs.MONGO_DB_NAME }}","COMET_API_KEY":"${{ secrets.COMET_API_KEY }}","QDRANT_API_KEY":"${{ secrets.QDRANT_API_KEY }}","QDRANT_URL":"${{ secrets.QDRANT_URL }}", "OPIK_CONFIG_PATH": "/tmp/.opik.config"}'
          timeout: 180
          memory-size: 1024
